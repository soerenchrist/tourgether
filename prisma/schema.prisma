// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Tour {
    id String @id @default(cuid())
    name String
    description String @db.VarChar(2000)
    elevationUp Int
    elevationDown Int
    distance Int
    date DateTime
    startTime String?
    endTime String?
    creatorId String
    creator User @relation(fields: [creatorId], references: [email])
    tourPeaks TourPeak[]
    points Point[]
    visibility Visibility @default(FRIENDS) 
}


enum Visibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Point {
    id String @id @default(cuid())
    latitude Float
    longitude Float
    elevation Float
    time DateTime
    heartRate Int?
    temperature Float?
    tour Tour @relation(fields: [tourId], references: [id])
    tourId String
}

model WishlistItem {
    id String @id @default(cuid())
    peakId String
    peak Peak @relation(fields: [peakId], references: [id])
    userId String
    user User @relation(fields: [userId], references: [email])
    addDate DateTime
}


model Peak {
    id String @id @default(cuid())
    name String
    osmId BigInt?
    latitude Float
    longitude Float
    height Int
    wikipedia String?
    wikidata String?
    tourPeaks TourPeak[]
    wishlistItems WishlistItem[]
    creatorId String?
}

model TourPeak {
    id String @id @default(cuid())
    peakId String
    peak Peak @relation(fields: [peakId], references: [id])
    tourId String
    tour Tour @relation(fields: [tourId], references: [id])
}

model FriendRequest {
    id String @id @default(cuid())
    validUntil DateTime
    issuedById String
    token String
    issuedBy User @relation(fields: [issuedById], references: [email])
}

model Friendship {
    user1Id String
    user2Id String

    user1 User @relation(name: "friendship1", fields: [user1Id], references: [email], map: "friendship1")
    user2 User @relation(name: "friendship2", fields: [user2Id], references: [email], map: "friendship2")

    startDate DateTime @default(now())

    @@id([user1Id, user2Id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    friendship1 Friendship[] @relation(name: "friendship1")
    friendship2 Friendship[] @relation(name: "friendship2")
    createdTours Tour[]
    wishlistItems WishlistItem[]
    friendRequests FriendRequest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
