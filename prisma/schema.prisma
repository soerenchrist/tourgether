// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Tour {
    id            String          @id @default(cuid())
    name          String
    description   String          @db.VarChar(2000)
    elevationUp   Int
    elevationDown Int
    distance      Int
    date          DateTime
    startTime     String?
    endTime       String?
    creatorId     String
    creator       User            @relation(fields: [creatorId], references: [id])
    tourPeaks     TourPeak[]
    gpxUrl        String?
    visibility    Visibility      @default(FRIENDS)
    likes         Like[]
    companions    CompanionShip[]
    comments      Comment[]
    images        Image[]
}

model CompanionShip {
    tourId String
    tour   Tour          @relation(fields: [tourId], references: [id])
    userId String
    user   User          @relation(fields: [userId], references: [id])
    role   CompanionRole

    @@id([tourId, userId])
}

enum CompanionRole {
    VIEWER
    MAINTAINER
}

model Image {
    id       String @id @default(cuid())
    filename String
    url      String
    tourId   String
    tour     Tour   @relation(fields: [tourId], references: [id])
}

model Like {
    id     String   @id @default(cuid())
    userId String
    user   User     @relation(fields: [userId], references: [id])
    tourId String
    tour   Tour     @relation(fields: [tourId], references: [id])
    date   DateTime @default(now())
}

model Comment {
    id      String   @id @default(cuid())
    userId  String
    user    User     @relation(fields: [userId], references: [id])
    tourId  String
    tour    Tour     @relation(fields: [tourId], references: [id])
    date    DateTime @default(now())
    content String   @db.VarChar(200)
}

enum Visibility {
    PUBLIC
    FRIENDS
    PRIVATE
}

enum ProfileVisibility {
    PUBLIC
    PRIVATE
}

model WishlistItem {
    id         String    @id @default(cuid())
    peakId     String
    peak       Peak      @relation(fields: [peakId], references: [id])
    userId     String
    user       User      @relation(fields: [userId], references: [id])
    addDate    DateTime  @default(now())
    finished   Boolean   @default(false)
    finishDate DateTime?
}

model Peak {
    id            String         @id @default(cuid())
    name          String
    osmId         BigInt?
    latitude      Float
    longitude     Float
    height        Int
    prominence    Int?
    cross         Boolean?
    register      Boolean?
    massif        String?
    wikipedia     String?
    wikidata      String?
    tourPeaks     TourPeak[]
    wishlistItems WishlistItem[]
    creatorId     String?
}

model TourPeak {
    id     String @id @default(cuid())
    peakId String
    peak   Peak   @relation(fields: [peakId], references: [id])
    tourId String
    tour   Tour   @relation(fields: [tourId], references: [id])
}

model Friendship {
    user1Id String
    user2Id String

    user1 User @relation(name: "friendship1", fields: [user1Id], references: [id], map: "friendship1")
    user2 User @relation(name: "friendship2", fields: [user2Id], references: [id], map: "friendship2")

    startDate DateTime        @default(now())
    state     FriendshipState @default(ACTIVE)

    @@id([user1Id, user2Id])
}

enum FriendshipState {
    PENDING
    ACTIVE
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
    id           String            @id
    name         String?
    favoritePeak String?
    status       String?
    location     String?
    visibility   ProfileVisibility @default(PUBLIC)
    user         User              @relation(fields: [id], references: [id])
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    hasOnboarded   Boolean         @default(false)
    accounts       Account[]
    sessions       Session[]
    friendship1    Friendship[]    @relation(name: "friendship1")
    friendship2    Friendship[]    @relation(name: "friendship2")
    profile        Profile?
    createdTours   Tour[]
    wishlistItems  WishlistItem[]
    likes          Like[]
    comments       Comment[]
    companionShips CompanionShip[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
